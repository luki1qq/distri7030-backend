// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {

  id             Int            @id @default(autoincrement())
  username       String?
  password       String
  firstName      String
  lastName       String
  email          String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isActive       Boolean        @default(true)
  hasChangedPass Boolean        @default(false)
  verified       Boolean        @default(false)
  lastLogin      DateTime?
  UserRoles      UserRoles[]
  AuditLogs      AuditLogs[]
  Order          Order[]
  UserDiscount   UserDiscount[]

}

model UserRoles {
  id        Int       @id @default(autoincrement())
  userId    Int
  roleId    Int
  User      User      @relation(fields: [userId], references: [id])
  RoleTable RoleTable @relation(fields: [roleId], references: [id])
}

model RoleTable {
  id              Int               @id @default(autoincrement())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isActive        Boolean           @default(true)
  description     String?
  UserRoles       UserRoles[]
  RolePermissions RolePermissions[]
}

model RolePermissions {
  id              Int             @id @default(autoincrement())
  roleId          Int
  permissionId    Int
  RoleTable       RoleTable       @relation(fields: [roleId], references: [id])
  PermissionTable PermissionTable @relation(fields: [permissionId], references: [id])
}

model PermissionTable {
  id              Int               @id @default(autoincrement())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isActive        Boolean           @default(true)
  description     String?
  RolePermissions RolePermissions[]
}

model AuditLogs {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Products {
  id                Int               @id @default(autoincrement())
  codeCompatibility String
  priceSale         Float
  image             String            @db.VarChar(500)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isActive          Boolean           @default(true)
  description       String
  Category          Category          @relation(fields: [categoryId], references: [id])
  categoryId        Int
  subCategory       subCategory       @relation(fields: [subCategoryId], references: [id])
  subCategoryId     Int
  detailOrder       detailOrder[]
  ProductDiscount   ProductDiscount[]
}

model Category {
  id          Int           @id @default(autoincrement())
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean       @default(true)
  Products    Products[]
  subCategory subCategory[]
}

model subCategory {
  id          Int        @id @default(autoincrement())
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isActive    Boolean    @default(true)
  Category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  Products    Products[]
}

model Order {
  id          Int           @id @default(autoincrement())
  userId      Int
  total       Float
  observation String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean       @default(true)
  orderState  String        @default("PENDIENTE")
  User        User          @relation(fields: [userId], references: [id])
  detailOrder detailOrder[]
}

model detailOrder {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  Order     Order    @relation(fields: [orderId], references: [id])
  Product   Products @relation(fields: [productId], references: [id])
}

model ProductDiscount {
  id         Int      @id @default(autoincrement())
  productId  Int
  discountId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isActive   Boolean  @default(true)
  Products   Products @relation(fields: [productId], references: [id])
  Discount   Discount @relation(fields: [discountId], references: [id])
}

model Discount {
  id              Int               @id @default(autoincrement())
  name            String
  percentage      Float
  description     String?
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isActive        Boolean           @default(true)
  ProductDiscount ProductDiscount[]
  UserDiscount    UserDiscount[]
}

model UserDiscount {
  id         Int      @id @default(autoincrement())
  userId     Int
  discountId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isActive   Boolean  @default(true)
  User       User     @relation(fields: [userId], references: [id])
  Discount   Discount @relation(fields: [discountId], references: [id])
}
